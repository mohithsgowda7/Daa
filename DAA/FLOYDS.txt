#include <stdio.h>
void floyd(int n,int dist[10][10]);

int main() 
{
    int i,j,n,dist[10][10];
     printf("enter the number of nodes\n");
     scanf("%d",&n);
     printf("enter the adjacency matrix\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            scanf("%d",&dist[i][j]);
          
        }
    }
    
    floyd(n,dist);

    return 0;
}


void floyd(int n,int dist[10][10])
{
    int i,j,k;
    
    for(k=1;k<=n;k++)
    {
        for(i=1;i<=n;i++)
        {
            for(j=1;j<=n;j++)
            {
                if(dist[i][k]+dist[k][j]<dist[i][j])
                dist[i][j]=dist[i][k]+dist[k][j];
            }
        }
    }
    
    printf("the shortest path between all pairs of vertices is:\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
         {
             if(dist[i][j]==999)
             printf("INF\t");
             else
             printf("%d\t",dist[i][j]);
         }
         printf("\n");
    }
}



GPT


#include <stdio.h>
#define INF 99999  // A large value representing infinity

void floyd(int n, int dist[10][10]);

int main() 
{
    int i, j, n, dist[10][10];
    
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    
    printf("Enter the adjacency matrix (use 99999 for infinity):\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }
    
    floyd(n, dist);

    return 0;
}

void floyd(int n, int dist[10][10]) 
{
    int i, j, k;
    
    for(k = 1; k <= n; k++) {
        for(i = 1; i <= n; i++) {
            for(j = 1; j <= n; j++) {
                // Update dist[i][j] if a shorter path is found through vertex k
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }
    
    // Display the shortest path matrix
    printf("The shortest path between all pairs of vertices is:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            if(dist[i][j] == INF)
                printf("INF\t");
            else
                printf("%d\t", dist[i][j]);
        }
        printf("\n");
    }
    
    // Detect negative cycles
    for (i = 1; i <= n; i++) {
        if (dist[i][i] < 0) {
            printf("Graph contains a negative cycle!\n");
            return;
        }
    }
}S