#include<stdio.h>
void swap(int *a,int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;

}

int main()
{  int n,a[10];
  printf("enter the no of elements\n");
  scanf("%d",&n);
  printf("enter the elements\n");
  for(int i=0;i<n;i++)
  {
      scanf("%d",&a[i]);
  }
  
heapsort(a,n);

printarray(a,n);
 
  return 0;
  
}

void heapsort(int a[],int n)
{
    int i;
    for(i=n/2-1;i>=0;i--)
       heapify(a,n,i);
      
     for(i=n;i>0;i--)
     {
         swap(&a[0],&a[i]);
         heapify(a,i,0);
     }
       
}

void heapify(int a[],int n,int i)
{
    int largest=i;
    int left=2*i+1;
    int right=2*i+2;
    
    if(left<n && a[left]>a[largest])
    largest =left;
    if(right<n && a[right]>a[largest])
    largest =right;
    
    if(largest!=i)
    {
    swap(&a[largest],&a[i]);
    heapify(a,n,largest);
    
    }
}

void printarray(int a[],int n)
{
    for(int i=0;i<n;i++)
    printf("%d\t",a[i]);
}



GPT



#include <stdio.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Function to heapify a subtree rooted at node 'i' in an array of size 'n'
void heapify(int arr[], int n, int i) {
    int largest = i;    // Initialize largest as root
    int left = 2 * i + 1;   // Left child
    int right = 2 * i + 2;  // Right child

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than the largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If the largest is not the root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);

        // Recursively heapify the affected subtree
        heapify(arr, n, largest);
    }
}

// Main function to perform heap sort
void heapSort(int arr[], int n) {
    // Build a max heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extract elements one by one from the heap
    for (int i = n - 1; i > 0; i--) {
        // Move the current root (largest) to the end
        swap(&arr[0], &arr[i]);

        // Call heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

// Function to print the array
void printArray(int arr[], int n) {
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int n, arr[20];

    // Input number of elements
    printf("Enter number of elements: ");
    scanf("%d", &n);

    // Input elements
    printf("Enter the elements: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    // Perform Heap Sort
    heapSort(arr, n);

    // Print sorted array
    printf("Sorted array: ");
    printArray(arr, n);

    return 0;
}
