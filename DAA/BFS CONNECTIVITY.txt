#include <stdio.h>
void bfs(int n,int a[10][10],int visited[10],int start);

int main() 
{
    int i,j,n,a[10][10],visited[10]={0};
     printf("enter the number of nodes\n");
     scanf("%d",&n);
     printf("enter the adjacency matrix\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
          
        }
    }
    int start=0;
    bfs(n,a,visited,start);
    
    int connect=1;
    for(i=0;i<n;i++)
    {
        if(visited[i]==0)
        connect=0;
    }
    
    if(connect)
      printf("the graph is connected\n");
      else
      printf("the graph is not connected\n");
    return 0;
}


void bfs(int n,int a[10][10],int visited[10],int start)
{
    int queue[10],front=0,rear=0,i;
    
    visited[start]=1;
    queue[rear++]=start;
    
    while(front<rear)
    {
        int current=queue[front++];
        
        for(i=0;i<n;i++)
        {
            if(a[current][i]==1 && visited[i]==0)
            {
                visited[i]=1;
                queue[rear++]=i;
            }
        }
    }
}


GPT






#include <stdio.h>
#include <stdlib.h>

#define MAX 10

void bfs(int adj[MAX][MAX], int visited[MAX], int n, int start);

int main() {
    int n, adj[MAX][MAX], visited[MAX] = {0}, i, j, start;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the adjacency matrix (use 0 for no edge, 1 for edge):\n");
    for(i = 0; i < n; i++) {
        for(j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }

    // Start BFS from the first node (index 0)
    start = 0;
    bfs(adj, visited, n, start);

    // Check if all nodes were visited
    int connected = 1;
    for(i = 0; i < n; i++) {
        if(visited[i] == 0) {
            connected = 0;
            break;
        }
    }

    if(connected)
        printf("The graph is connected.\n");
    else
        printf("The graph is not connected.\n");

    return 0;
}

void bfs(int adj[MAX][MAX], int visited[MAX], int n, int start) {
    int queue[MAX], front = 0, rear = 0, i;

    // Start BFS from the given node
    visited[start] = 1;
    queue[rear++] = start;

    while(front < rear) {
        int current = queue[front++];

        // Visit all adjacent nodes
        for(i = 0; i < n; i++) {
            if(adj[current][i] == 1 && visited[i] == 0) {
                visited[i] = 1;
                queue[rear++] = i;
            }
        }
    }
}
