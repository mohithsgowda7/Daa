MY CODE
#include <stdio.h>
#include <stdlib.h>
void dijkstras(int n,int cost[10][10],int s,int dist[10]); 
int main() {
   int i,j,n,s,cost[10][10],dist[10];
    printf("enter the number of nodes\n");
    scanf("%d",&n);
    printf("enter the elements of adjacency matrix\n");
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            scanf("%d",&cost[i][j]);
            if(cost[i][j]==0 && i!=j)
               cost[i][j]=999;
        }
    }
printf("enter the source vertex\n");
scanf("%d",&s);
dijkstras(n,cost,s,dist);
printf("shortest path from %d is\n",s);
 for(i=1;i<=n;i++)
 {
     if(s!=i)
     {
         printf("%d->%d=%d\n",s,i,dist[i]);
     }
 }
    return 0;
}
 
void dijkstras(int n,int cost[10][10],int s,int dist[10]) 
{
    int i,v,count=1,min,visited[10];
    for(i=1;i<=n;i++)
    {
        visited[i]=0;
        dist[i]=cost[s][i];
    }

   visited[s]=1;
   dist[s]=0;
   while(count<n)
   {
       min=999;
       for(i=1;i<=n;i++)
       {
           if(dist[i]<min && visited[i]==0)
           {
               min=dist[i];
               v=i;
           }
             
       }
       visited[v]=1; 
       count++;
      for(i=0;i<=n;i++) 
       {
           if(dist[i]>dist[v]+cost[v][i])
          dist[i]=dist[v]+cost[v][i];
       }
   }
}


GPT

#include <stdio.h>
#include <stdlib.h>

void dijkstras(int n, int cost[10][10], int s, int dist[10]);

int main() {
    int i, j, n, s, cost[10][10], dist[10];

    printf("Enter the number of nodes:\n");
    scanf("%d", &n);

    printf("Enter the elements of the adjacency matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if(cost[i][j] == 0 && i != j)
                cost[i][j] = 999; // Using 999 to represent infinity (no connection)
        }
    }

    printf("Enter the source vertex:\n");
    scanf("%d", &s);

    dijkstras(n, cost, s, dist);

    printf("Shortest paths from vertex %d are:\n", s);
    for(i = 1; i <= n; i++) {
        if(s != i) {
            printf("%d -> %d = %d\n", s, i, dist[i]);
        }
    }

    return 0;
}

void dijkstras(int n, int cost[10][10], int s, int dist[10]) {
    int visited[10], count, min, v, i;

    for(i = 1; i <= n; i++) {
        visited[i] = 0;       // Mark all nodes as unvisited
        dist[i] = cost[s][i]; // Initialize distances with cost from source
    }

    visited[s] = 1; // Mark the source as visited
    dist[s] = 0;    // Distance to source itself is 0
    count = 1;

    while(count < n) { // Process all nodes except the source
        min = 999;
        for(i = 1; i <= n; i++) {
            if(!visited[i] && dist[i] < min) { // Find the unvisited node with the smallest distance
                min = dist[i];
                v = i;
            }
        }

        visited[v] = 1; // Mark the node as visited
        count++;

        for(i = 1; i <= n; i++) { // Update distances to the other nodes
            if(!visited[i] && dist[i] > dist[v] + cost[v][i]) {
                dist[i] = dist[v] + cost[v][i];
            }
        }
    }
}
